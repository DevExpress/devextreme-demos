name: Frameworks

concurrency:
  group: wf-${{github.event.pull_request.number}}-${{github.workflow}}
  cancel-in-progress: true

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 */2 * * 6,0'

jobs:
  build-devextreme:
    runs-on: ubuntu-latest
    name: Build
    timeout-minutes: 15

    steps:

    #Git
    - name: Get sources
      uses: actions/checkout@v2   

    - name: Clone devextreme repo from PR author fork
      continue-on-error: true
      if: github.event_name == 'pull_request'
      run: git clone -b ${{github.event.pull_request.head.ref}} --depth 1 https://github.com/${{github.event.pull_request.user.login}}/devextreme ./devextreme-repo

    - name: Clone devextreme repo
      run: |
        BASE_BRANCH=$(node -p -e "require('./package.json').version.slice(0, 4).replace('.', '_')")
        test -d ./devextreme-repo || git clone -b $BASE_BRANCH --depth 1 https://github.com/devexpress/devextreme ./devextreme-repo

    #Build Devextreme
    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: ./devextreme-repo/node_modules
        key: ${{ runner.os }}-devextreme-node-modules-${{ hashFiles('devextreme-repo/package-lock.json') }}
        restore-keys: ${{ runner.os }}-devextreme-node-modules

    - name: Use Node.js 15
      uses: actions/setup-node@v2
      with:
        node-version: '15'

    - name: Install packages
      working-directory: ./devextreme-repo
      run: npm install --no-audit --no-fund

    - name: Build
      working-directory: ./devextreme-repo
      run: npm run build-npm-devextreme

    - name: Pack
      working-directory: ./devextreme-repo/artifacts/npm/devextreme
      run: npm pack

    - name: Copy package
      run: cp ./devextreme-repo/artifacts/npm/devextreme/*.tgz ./devextreme-installer.tgz

    - name: Copy build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: devextreme-sources
        path: |
          devextreme-installer.tgz
        retention-days: 1

  build-react:
    runs-on: ubuntu-latest
    name: Build
    timeout-minutes: 20
    needs: build-devextreme

    steps:

    - name: Use Node.js 14
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Download devextreme sources
      uses: actions/download-artifact@v2
      with:
        name: devextreme-sources

    #Build devextreme-react
    - name: Clone devextreme-react repo
      run: git clone -b master https://github.com/devexpress/devextreme-react ./devextreme-react-repo

    - name: Update react metadata
      working-directory: ./devextreme-repo
      run: npm run internal-tool -- update-integration-meta --output-path ../devextreme-react-repo/packages/devextreme-react/metadata/integration-data.json --version 22_1 --js-scripts ./js

    - name: Copy devextreme package
      run: |
        mkdir ./devextreme-react-repo/devextreme-setup
        cp ./devextreme-installer.tgz ./devextreme-react-repo/devextreme-setup

    - name: Get devextreme-react ref
      working-directory: ./devextreme-react-repo
      id: devextreme-react-ref
      run: echo "::set-output name=head::$(git rev-parse HEAD)"
   
    - name: Restore package cache
      id: devextreme-react-cache
      uses: actions/cache@v2
      with:
        path: ./devextreme-react-*.tgz
        key: devextreme-react-package-${{ steps.devextreme-react-ref.outputs.head }}-${{ hashFiles('devextreme-react-repo/packages/devextreme-react/metadata/integration-data.json') }}

    - name: Install devextreme package
      # if: steps.devextreme-react-cache.outputs.cache-hit != 'true'
      working-directory: ./devextreme-react-repo
      run: |
        pushd devextreme-setup
        installerName=$(realpath .)/$(ls *.tgz)
        popd
        cd ./packages/devextreme-react
        npm install --save-dev $installerName
        cd ../sandbox
        npm install --save-dev $installerName
        cd ../../
        npm install --save-dev $installerName

    - name: Install packages for devextreme-react
      # if: steps.devextreme-react-cache.outputs.cache-hit != 'true'
      working-directory: ./devextreme-react-repo
      run: npm install --no-audit --no-fund
      
    - name: Build and Pack
      # if: steps.devextreme-react-cache.outputs.cache-hit != 'true'
      working-directory: ./devextreme-react-repo
      run: npm run pack

    - name: Copy devextreme-react package
      # if: steps.devextreme-react-cache.outputs.cache-hit != 'true'
      run: cp ./devextreme-react-repo/packages/devextreme-react/npm/*.tgz ./devextreme-react-installer.tgz

    - name: Copy build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: devextreme-sources
        path: |
          devextreme-react-installer.tgz
        retention-days: 1

  build-vue:
    runs-on: ubuntu-latest
    name: Build
    timeout-minutes: 20
    needs: build-devextreme

    steps:

    - name: Use Node.js 14
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Download devextreme sources
      uses: actions/download-artifact@v2
      with:
        name: devextreme-sources

    #Build devextreme-vue
    - name: Clone devextreme-vue repo
      run: git clone -b master https://github.com/devexpress/devextreme-vue ./devextreme-vue-repo

    - name: Update vue metadata
      working-directory: ./devextreme-repo
      run: npm run internal-tool -- update-integration-meta --output-path ../devextreme-react-repo/packages/devextreme-vue/metadata/integration-data.json --version 22_1 --js-scripts ./js

    - name: Copy devextreme package
      run: |
        mkdir ./devextreme-vue-repo/devextreme-setup
        cp ./devextreme-installer.tgz ./devextreme-react-repo/devextreme-setup
   
    - name: Get devextreme-vue ref
      working-directory: ./devextreme-vue-repo
      id: devextreme-vue-ref
      run: echo "::set-output name=head::$(git rev-parse HEAD)"
   
    - name: Restore package cache
      id: devextreme-vue-cache
      uses: actions/cache@v2
      with:
        path: ./devextreme-vue-*.tgz
        key: devextreme-vue-package-${{ steps.devextreme-vue-ref.outputs.head }}-${{ hashFiles('devextreme-vue-repo/packages/devextreme-vue/metadata/integration-data.json') }}

    - name: Install devextreme package
      # if: steps.devextreme-vue-cache.outputs.cache-hit != 'true'
      working-directory: ./devextreme-vue-repo
      run: |
        pushd devextreme-setup
        installerName=$(realpath .)/$(ls *.tgz)
        popd
        cd ./packages/devextreme-vue
        npm install --save-dev $installerName
        cd ../sandbox
        npm install --save-dev $installerName
        cd ../vue2-strategy
        npm install --save-dev $installerName
        cd ../../
        npm install --save-dev $installerName

    - name: Install packages for devextreme-vue
      # if: steps.devextreme-vue-cache.outputs.cache-hit != 'true'
      working-directory: ./devextreme-vue-repo
      run: npm install --no-audit --no-fund
      
    - name: Build and Pack
      # if: steps.devextreme-vue-cache.outputs.cache-hit != 'true'
      working-directory: ./devextreme-vue-repo
      run: npm run pack

    - name: Copy devextreme-vue package
      # if: steps.devextreme-vue-cache.outputs.cache-hit != 'true'
      run: cp ./devextreme-vue-repo/packages/devextreme-vue/npm/*.tgz ./devextreme-vue-installer.tgz

    - name: Copy build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: devextreme-sources
        path: |
          devextreme-vue-installer.tgz
        retention-days: 1

  build-angular:
    runs-on: ubuntu-latest
    name: Build
    timeout-minutes: 20
    needs: build-devextreme

    steps:

    - name: Use Node.js 14
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Download devextreme sources
      uses: actions/download-artifact@v2
      with:
        name: devextreme-sources

    - name: Clone devextreme-angular repo
      run: git clone -b master https://github.com/devexpress/devextreme-angular ./devextreme-angular-repo

    - name: Update angular metadata
      working-directory: ./devextreme-repo
      run: npm run internal-tool -- update-meta --output-path ../devextreme-angular-repo/packages/devextreme-angular/metadata/NGMetaData.json --version 22_1 --js-scripts ./js

    - name: Copy devextreme package
      run: |
        mkdir ./devextreme-angular-repo/devextreme-setup
        cp ./devextreme-installer.tgz ./devextreme-react-repo/devextreme-setup
   
    - name: Get devextreme-angular ref
      working-directory: ./devextreme-angular-repo
      id: devextreme-angular-ref
      run: echo "::set-output name=head::$(git rev-parse HEAD)"
   
    - name: Restore package cache
      id: devextreme-angular-cache
      uses: actions/cache@v2
      with:
        path: ./devextreme-angular-*.tgz
        key: devextreme-angular-package-${{ steps.devextreme-angular-ref.outputs.head }}-${{ hashFiles('devextreme-angular-repo/packages/devextreme-angular/metadata/NGMetaData.json') }}

    - name: Install devextreme package
      # if: steps.devextreme-angular-cache.outputs.cache-hit != 'true'
      working-directory: ./devextreme-angular-repo
      run: |
        pushd devextreme-setup
        installerName=$(realpath .)/$(ls *.tgz)
        popd
        cd ./packages/devextreme-angular
        npm install --save-dev $installerName
        cd ../sandbox
        npm install --save-dev $installerName
        cd ../../
        npm install --save-dev $installerName

    - name: Install packages for devextreme-angular
      # if: steps.devextreme-angular-cache.outputs.cache-hit != 'true'
      working-directory: ./devextreme-angular-repo
      run: npm install --no-audit --no-fund
      
    - name: Build and Pack
      # if: steps.devextreme-angular-cache.outputs.cache-hit != 'true'
      working-directory: ./devextreme-angular-repo
      run: npm run pack

    - name: Copy devextreme-angular package
      # if: steps.devextreme-angular-cache.outputs.cache-hit != 'true'
      run: cp ./devextreme-angular-repo/packages/devextreme-angular/npm/dist/*.tgz ./devextreme-angular-installer.tgz

    - name: Copy build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: devextreme-sources
        path: |
          devextreme-angular-installer.tgz
        retention-days: 1

  build-demos:
    runs-on: ubuntu-latest
    name: Build
    timeout-minutes: 20
    needs: [build-angular, build-react, build-vue]

    steps:

    - name: Use Node.js 14
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Download devextreme sources
      uses: actions/download-artifact@v2
      with:
        name: devextreme-sources

    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules

    - name: Delete DX packages
      run:  sed -i '/22.1-next/d' ./package.json

    - name: Use Node.js 15
      uses: actions/setup-node@v2
      with:
        node-version: '15'

    - name: Install packages
      run: npm install --no-audit --no-fund

    - name: Install package
      run: |
        devextremePath=$(find ./devextreme-repo/artifacts/npm/devextreme/ -maxdepth 1 -name "devextreme-*.tgz");
        reactPath=$(ls devextreme-react-*.tgz)
        vuePath=$(ls devextreme-vue-*.tgz)
        angularPath=$(ls devextreme-angular-*.tgz)
        npm install $devextremePath
        npm install $reactPath
        npm install $vuePath
        npm install $angularPath
        cp $devextremePath devextreme-installer.tgz
        cp $reactPath devextreme-react-installer.tgz
        cp $vuePath devextreme-vue-installer.tgz
        cp $angularPath devextreme-angular-installer.tgz

    - name: Prepare bundles
      run: npm run prepare-bundles

    #Publish artifacts
    - name: Zip node_modules    
      run: 7z a -t7z -mx3 -mmt2 node_modules.7z node_modules

    - name: Copy build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: devextreme-sources
        path: |
          node_modules.7z
          bundles/
        retention-days: 1

  lint:
    name: Lint code base
    needs: build-demos

    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Get sources
      uses: actions/checkout@v2

    - name: Delete DX packages
      run:  sed -i '/22.1-next/d' ./package.json
    
    - name: Download devextreme sources
      uses: actions/download-artifact@v2
      with:
        name: devextreme-sources

    - name: Unpack artifacts
      run: 7z x node_modules.7z

    - name: Install packages
      run: |
        npm install devextreme-installer.tgz
        npm install devextreme-react-installer.tgz
        npm install devextreme-vue-installer.tgz
        npm install devextreme-angular-installer.tgz

    - name: Run npm install
      run: npm install --no-audit --no-fund

    - name: Run dotnet format install
      run: dotnet tool install -g dotnet-format --version 5.1.225507

    - name: Run lint
      run: npm run lint

  testcafe:
    needs: build-demos
    strategy:
      fail-fast: false
      matrix:
        CONSTEL: [react(1/4), react(2/4), react(3/4), react(4/4), vue(1/4), vue(2/4), vue(3/4), vue(4/4), angular(1/4), angular(2/4), angular(3/4), angular(4/4)]

    runs-on: ubuntu-latest
    name: ${{ matrix.CONSTEL }}
    timeout-minutes: 60

    steps:
    - name: Get sources
      uses: actions/checkout@v2

    - name: Delete DX packages
      run:  sed -i '/22.1-next/d' ./package.json

    - name: Download devextreme sources
      uses: actions/download-artifact@v2
      with:
        name: devextreme-sources

    - name: Unpack artifacts
      run: 7z x node_modules.7z

    - name: Prepare JS
      run: npm run prepare-js
    
    - name: Prepare Bundles
      run: npx gulp bundles

    - name: Run Web Server
      run: |
        python -m http.server 8080 &
        python -m http.server 8081 &
        python -m http.server 8082 &
        python -m http.server 8083 &

    - name: Get changed files
      if: github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'force all tests')
      run: |
        curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --url https://api.github.com/repos/${{github.repository}}/pulls/${{github.event.pull_request.number}}/files > changed-files.json

    - name: Run TestCafe tests
      env:
        CHANGEDFILEINFOSPATH: ${{ github.workspace }}/changed-files.json
        BROWSERS: chrome:headless --disable-partial-raster --disable-skia-runtime-opts --run-all-compositor-stages-before-draw --disable-new-content-rendering-timeout --disable-threaded-animation --disable-threaded-scrolling --disable-checker-imaging --disable-image-animation-resync --use-gl="swiftshader" --disable-features=PaintHolding --js-flags=--random-seed=2147483647 --font-render-hinting=none --disable-font-subpixel-positioning
        #DEBUG: hammerhead:*,testcafe:*
        CONCURRENCY: 4
        TCQUARANTINE: true
        CONSTEL: ${{ matrix.CONSTEL }}
        # DISABLE_DEMO_TEST_SETTINGS: all # Uncomment to ignore all the visualtestrc.json settings
        # DISABLE_DEMO_TEST_SETTINGS: ignore # Uncomment to ignore the `ignore` field
        # DISABLE_DEMO_TEST_SETTINGS: comparison-options # Uncomment to ignore the `comparison-options` field
        CI_ENV: true # The `ignore` field in the visualtestrc.json should be disabled when running test locally
      run: npm run test-testcafe

    - name: Get screenshots artifacts name
      if: ${{ failure() }}
      id: screenshotname
      run: echo ::set-output name=value::$(echo "${{ matrix.CONSTEL }}" | grep -oP "^\w+")

    - name: Copy screenshots artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: screenshots-${{ steps.screenshotname.outputs.value }}
        path: ${{ github.workspace }}/testing/artifacts/compared-screenshots/*
        if-no-files-found: ignore
