<div class="dx-viewport">
    <div class="demo-container">
        @(Html.DevExtreme().Splitter()
            .ID("splitter")
            .Items(items =>
            {
                items.Add()
                .Resizable(true)
                .Size("140px")
                .MinSize("70px")
                .Template(new JS("function(data, itemIndex, itemElement){return paneContentTemplate(data, 'Left Pane', itemElement)}"));

                items.Add().Splitter(s =>
                {
                    s.Orientation(Orientation.Vertical);
                    s.Items(verticalItems =>
                    {
                        verticalItems.Add()
                        .Resizable(true)
                        .Collapsible(true)
                        .MaxSize("75%")
                        .Template(new JS("function(data, itemIndex, itemElement){return paneContentTemplate(data, 'Central Pane', itemElement)}"));

                        verticalItems.Add()
                        .Collapsible(true)
                        .Splitter(horizontalSplitter =>
                        {
                            horizontalSplitter.Orientation(Orientation.Horizontal);
                            horizontalSplitter.Items(horizontalItems =>
                            {
                                horizontalItems.Add()
                    .Resizable(true)
                    .Collapsible(true)
                    .Size("30%")
                    .MinSize("5%")
                    .Template(new JS("function(data, itemIndex, itemElement){return paneContentTemplate(data, 'Nested Left Pane', itemElement)}"));

                                horizontalItems.Add()
                    .Collapsible(false)
                    .Template(new JS("function(data, itemIndex, itemElement){return paneContentTemplate(data, 'Nested Central Pane', itemElement)}"));

                                horizontalItems.Add()
                    .Resizable(true)
                    .Collapsible(true)
                    .Size("30%")
                    .MinSize("5%")
                    .Template(new JS("function(data, itemIndex, itemElement){return paneContentTemplate(data, 'Nested Right Pane', itemElement)}"));
                            });
                        });
                    });
                });

                items.Add()
                .Resizable(false)
                .Collapsible(false)
                .Size("140px")
                .Template(new JS("function(data, itemIndex, itemElement){return paneContentTemplate(data, 'Right Pane', itemElement)}"));
            })
            )
    </div>
</div>

<script>
    function getStateText(data) {
        if (data.resizable !== false && !data.collapsible) {
            return 'Resizable only';
        }
        const resizableText = data.resizable ? 'Resizable' : 'Non-resizable';
        const collapsibleText = data.collapsible ? 'collapsible' : 'non-collapsible';

        return `${resizableText} and ${collapsibleText}`;
    }

    function paneContentTemplate(data, paneName, element) {
        const dimensionOptions = new Set(['size', 'minSize', 'maxSize']);
        const filteredData = Object.fromEntries(
            Object.entries(data)
                .filter(([key]) => dimensionOptions.has(key))
        );
        element.eq(0).attr('tabIndex', '0');

        return `
                <div class='pane-content'>
                    <div class='pane-title'>
                        ${paneName}
                    </div>
                    <div class='pane-state'>
                        ${getStateText(data)}
                    </div>
                    ${Object.entries(filteredData).map(([key, value]) => `
                        <div class="pane-option">${key}: ${value}</div>
                    `).join('')}
                </div>
            `;
    }
</script>
