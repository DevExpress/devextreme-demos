@model DevExtreme.NETCore.Demos.ViewModels.ToolbarViewModel

@{
    var toolbarModes = new[] { "Multiline mode", "Single-line mode" };
}

<div>
    <div class="widget-container">
        @(Html.DevExtreme().Resizable()
            .ElementAttr("class", "resizable-container")
            .MinWidth(500)
            .MinHeight(150)
            .MaxHeight(370)
            .Handles(ResizeHandle.Right)
            .Area(".widget-container")
            .Content(
                Html.DevExtreme().Toolbar()
                    .ID("toolbar")
                    .Multiline(true)
                    .Items(items => {
                        items
                            .Add()
                            .Widget(w => w
                                .Button()
                                .Icon("undo")
                                .OnClick("undoButtonClick")
                            )
                            .Location(ToolbarItemLocation.Before);

                        items
                            .Add()
                            .Widget(w => w
                                .Button()
                                .Icon("redo")
                                .OnClick("redoButtonClick")
                            )
                            .Location(ToolbarItemLocation.Before);

                        items
                            .Add()
                            .CssClass("toolbar-separator-container")
                            .Template(new TemplateName("separator-template"))
                            .MenuItemTemplate(new TemplateName("menu-separator-template"))
                            .Location(ToolbarItemLocation.Before)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .Widget(w => w
                                .DropDownButton()
                                .Width("100%")
                                .DisplayExpr("Text")
                                .KeyExpr("Value")
                                .SelectedItemKey("14")
                                .UseSelectMode(true)
                                .DataSource(Model.FontSizes)
                                .OnSelectionChanged("changeFontSize")
                                .ItemTemplate(new JS("fontSizeItemTemplate"))
                            )
                            .Location(ToolbarItemLocation.Before)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .Widget(w => w
                                .DropDownButton()
                                .Width("100%")
                                .DisplayExpr("Text")
                                .KeyExpr("Value")
                                .SelectedItemKey("1.35")
                                .UseSelectMode(true)
                                .DataSource(Model.LineHeights)
                                .Icon("indent")
                                .OnSelectionChanged("changeLineHeight")
                            )
                            .Location(ToolbarItemLocation.Before)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .Widget(w => w
                                .SelectBox()
                                .Placeholder("Font")
                                .DisplayExpr("Text")
                                .DataSource(Model.FontFamilies)
                                .OnItemClick("fontFamilyClick")
                            )
                            .Location(ToolbarItemLocation.Before)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .CssClass("toolbar-separator-container")
                            .Template(new TemplateName("separator-template"))
                            .MenuItemTemplate(new TemplateName("menu-separator-template"))
                            .Location(ToolbarItemLocation.Before)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .Widget(w => w
                                .ButtonGroup()
                                .KeyExpr("icon")
                                .StylingMode(ButtonStylingMode.Outlined)
                                .SelectionMode(ButtonGroupSelectionMode.Multiple)
                                .Items(fontStyles => {
                                    fontStyles.Add().Icon("bold").Hint("Bold");
                                    fontStyles.Add().Icon("italic").Hint("Italic");
                                    fontStyles.Add().Icon("underline").Hint("Underlined");
                                    fontStyles.Add().Icon("strike").Hint("Strikethrough");
                                })
                                .OnItemClick("buttonGroupItemClick")
                            )
                            .Location(ToolbarItemLocation.Before);

                        items
                            .Add()
                            .Template(new TemplateName("separator-template"))
                            .Location(ToolbarItemLocation.Before);

                        items
                            .Add()
                            .CssClass("dx-toolbar-hidden-button-group")
                            .Template(new TemplateName("text-align-template"))
                            .MenuItemTemplate(new TemplateName("text-align-menu-template"))
                            .Location(ToolbarItemLocation.Before)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .Widget(w => w
                                .ButtonGroup()
                                .KeyExpr("alignment")
                                .StylingMode(ButtonStylingMode.Outlined)
                                .Items(listTypes => {
                                    listTypes.Add().Icon("orderedlist").Hint("Ordered").Option("alignment", "orderedlist");
                                    listTypes.Add().Icon("bulletlist").Hint("Bullet").Option("alignment", "bulletlist");
                                })
                                .OnItemClick("buttonGroupItemClick")
                            )
                            .Location(ToolbarItemLocation.Before);

                        items
                            .Add()
                            .CssClass("toolbar-separator-container")
                            .Template(new TemplateName("separator-template"))
                            .MenuItemTemplate(new TemplateName("menu-separator-template"))
                            .Location(ToolbarItemLocation.Before)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .Widget(w => w
                                .DateBox()
                                .Type(DateBoxType.Date)
                                .Width(200)
                                .Value(new DateTime(2022, 9, 7))
                                .OnValueChanged("dateBoxClick")
                            )
                            .Location(ToolbarItemLocation.Before)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .CssClass("toolbar-separator-container")
                            .Template(new TemplateName("separator-template"))
                            .MenuItemTemplate(new TemplateName("menu-separator-template"))
                            .Location(ToolbarItemLocation.Before)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .Widget(w => w
                                .CheckBox()
                                .Value(false)
                                .Text("Navigation Pane")
                                .OnOptionChanged("onOptionChanged")
                            )
                            .ShowText(ToolbarItemShowTextMode.InMenu)
                            .Location(ToolbarItemLocation.Before)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .Widget(w => w
                                .Button()
                                .Icon("attach")
                                .Text("Attach")
                                .OnClick("attachButtonClick")
                            )
                            .ShowText(ToolbarItemShowTextMode.InMenu)
                            .Location(ToolbarItemLocation.After);

                        items
                            .Add()
                            .Widget(w => w
                                .Button()
                                .Icon("add")
                                .Text("Add")
                                .OnClick("addButtonClick")
                            )
                            .ShowText(ToolbarItemShowTextMode.InMenu)
                            .Location(ToolbarItemLocation.After)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .Widget(w => w
                                .Button()
                                .Icon("trash")
                                .Text("Remove")
                                .OnClick("removeButtonClick")
                            )
                            .ShowText(ToolbarItemShowTextMode.InMenu)
                            .Location(ToolbarItemLocation.After)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto);

                        items
                            .Add()
                            .Widget(w => w
                                .Button()
                                .Icon("help")
                                .Text("About")
                                .OnClick("aboutButtonClick")
                            )
                            .ShowText(ToolbarItemShowTextMode.InMenu)
                            .LocateInMenu(ToolbarItemLocateInMenuMode.Always);
                    }
                ).ToString()
            )
        )
    </div>

    <div class="options-container">
        <div class="caption">Options</div>

        @(Html.DevExtreme().RadioGroup()
            .ID("toolbar-modes")
            .Layout(Orientation.Horizontal)
            .Items(toolbarModes)
            .Value(toolbarModes[0])
            .OnValueChanged("toolbarModesValueChanged"))
    </div>
</div>

@using (Html.DevExtreme().NamedTemplate("separator-template")) {
    <div class="toolbar-separator"></div>
}

@using (Html.DevExtreme().NamedTemplate("menu-separator-template")) {
    <div class="toolbar-menu-separator"></div>
}

@using (Html.DevExtreme().NamedTemplate("text-align-template")) {
    @(Html.DevExtreme().ButtonGroup()
        .KeyExpr("alignment")
        .StylingMode(ButtonStylingMode.Outlined)
        .Items(items => {
            items.Add().Icon("alignleft").Hint("Align Left").Option("alignment", "left");
            items.Add().Icon("aligncenter").Hint("Center").Option("alignment", "center");
            items.Add().Icon("alignright").Hint("Align Right").Option("alignment", "right");
            items.Add().Icon("alignjustify").Hint("Justify").Option("alignment", "justify");
        })
        .SelectedItemKeys(new[] { "left" })
        .OnItemClick("buttonGroupItemClick"))
}

@using (Html.DevExtreme().NamedTemplate("text-align-menu-template")) {
    @(Html.DevExtreme().ButtonGroup()
        .KeyExpr("alignment")
        .StylingMode(ButtonStylingMode.Text)
        .Items(items => {
            items.Add().Icon("alignleft").Hint("Align Left").Option("alignment", "left").Option("text", "Align left");
            items.Add().Icon("aligncenter").Hint("Center").Option("alignment", "center").Option("text", "Center");
            items.Add().Icon("alignright").Hint("Align Right").Option("alignment", "right").Option("text", "Align right");
            items.Add().Icon("alignjustify").Hint("Justify").Option("alignment", "justify").Option("text", "Justify");
        })
        .SelectedItemKeys(new[] { "left" })
        .OnItemClick("buttonGroupItemClick"))
}

<script>
    function fontSizeItemTemplate(itemData, itemIndex, itemElement) {
        itemElement.append(
            $("<div>").css({ fontSize: itemData.Text }).text(itemData.Text)
        )
    }

    function toolbarModesValueChanged({ value }) {
        var toolbar = $("#toolbar").dxToolbar("instance");
        toolbar.option("multiline", value === "Multiline mode");

        var toolbarModesInstance = $("#toolbar-modes").dxRadioGroup("instance");
        toolbarModesInstance.option("value", value);

        toolbar.repaint()
    }

    function dateBoxClick() {
        DevExpress.ui.notify('The "DateBox" value was changed');
    }

    function fontFamilyClick() {
        DevExpress.ui.notify('The "Font Family" value was changed');
    }

    function buttonGroupItemClick(e) {
        DevExpress.ui.notify(`The "${e.itemData.Hint}" button was clicked`);
    }

    function changeFontSize() {
        DevExpress.ui.notify('The "Font Size" value was changed');
    }

    function changeLineHeight() {
        DevExpress.ui.notify('The "Line Height" value was changed');
    }

    function undoButtonClick() {
        DevExpress.ui.notify('The "Undo" button was clicked');
    }

    function redoButtonClick() {
        DevExpress.ui.notify('The "Redo" button was clicked');
    }

    function attachButtonClick() {
        DevExpress.ui.notify('The "Attach" button was clicked');
    }

    function addButtonClick() {
        DevExpress.ui.notify('The "Add" button was clicked');
    }

    function removeButtonClick() {
        DevExpress.ui.notify('The "Remove" button was clicked');
    }

    function aboutButtonClick() {
        DevExpress.ui.notify('The "About" button was clicked');
    }

    function onOptionChanged() {
        DevExpress.ui.notify('The "Navigation Pane" checkbox value was changed');
    }
</script>
