@section ExternalDependencies {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>
}

@(Html.DevExtreme().PivotGrid()
    .ID("sales")
    .AllowSortingBySummary(true)
    .AllowSorting(true)
    .AllowFiltering(true)
    .AllowExpandAll(true)
    .Height(440)
    .ShowBorders(true)
    .FieldChooser(c => c.Enabled(false))
    .Export(e => e.Enabled(true))
    .OnCellPrepared("onCellPrepared")
    .OnExporting("onExporting")
    .DataSource(d => d
        .Store(s => s.Mvc().Controller("PivotGridData").LoadAction("Get"))
        .Fields(fields => {
            fields.Add()
                .Caption("Region")
                .DataField("Region")
                .Area(PivotGridArea.Row);

            fields.Add()
                .Caption("City")
                .Width(150)
                .DataField("City")
                .Area(PivotGridArea.Row);

            fields.Add()
                .DataField("Date")
                .DataType(PivotGridDataType.Date)
                .Area(PivotGridArea.Column);

            fields.Add()
                .Caption("Amount")
                .DataField("Amount")
                .DataType(PivotGridDataType.Number)
                .SummaryType(SummaryType.Sum)
                .Format(Format.Currency)
                .Area(PivotGridArea.Data);

            fields.Add()
                .Caption("Count")
                .DataField("Amount")
                .DataType(PivotGridDataType.Number)
                .SummaryType(SummaryType.Count)
                .Area(PivotGridArea.Data);
        })
    )
)

<script>
    function onCellPrepared(e) {
        if (e.rowType === 'T' || e.type === 'T' || e.type === 'GT' || e.type === "GT" || e.rowType === "GT" || e.columnType === "GT") {
            e.cellElement.css({ backgroundColor: '#DDDDDD' });
        }
        if (e.area === 'data') {
            if (e.cell.dataIndex === 1) {
                e.cellElement.css({ 'font-weight': 'bold' });
            } else {
                if (e.cell.value < 100000) {
                    e.cellElement.css({ color: '#DC3545' });
                } else {
                    e.cellElement.css({ color: '#28A745' });
                }
            }
        }
    }

    function onExporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Sales');

        DevExpress.excelExporter.exportPivotGrid({
            component: e.component,
            worksheet: worksheet,
            customizeCell: function (options) {
                var excelCell = options.excelCell;
                var pivotCell = options.pivotCell;

                if (pivotCell.rowType === 'T' || pivotCell.type === 'T' || pivotCell.type === 'GT' || pivotCell.type === "GT" || pivotCell.rowType === "GT" || pivotCell.columnType === "GT") {
                    excelCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'DDDDDD' } };
                    if (pivotCell.dataIndex === 0) {
                        excelCell.numFmt = '$ #,##.#,"K"';
                    }
                }

                if (pivotCell.area === 'data') {
                    if (pivotCell.dataIndex === 1) {
                        excelCell.font = { bold: true };
                    } else {
                        var color = pivotCell.value < 100000 ? 'DC3545' : '28A745';
                        excelCell.font = { color: { argb: color } };
                    }
                }

                var borderStyle = { style: 'thin', color: { argb: 'FF7E7E7E' } };
                excelCell.border = {
                    bottom: borderStyle,
                    left: borderStyle,
                    right: borderStyle,
                    top: borderStyle
                };
            }
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Sales.xlsx');
            });
        });
        e.cancel = true;
    }
</script>

