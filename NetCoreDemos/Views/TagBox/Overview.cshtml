@model DevExtreme.NETCore.Demos.ViewModels.TagBoxViewModel

<div class="form">
    <div class="dx-fieldset">
        <div class="dx-field">
            <div class="dx-field-label">Default mode</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                    .Items(Model.Items)
                    .InputAttr("aria-label", "Product")
                )
            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Search mode</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                    .Items(Model.Items)
                    .InputAttr("aria-label", "Product")
                    .SearchEnabled(true)
                )
            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Batch selection</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                    .Items(Model.Items)
                    .ShowSelectionControls(true)
                    .InputAttr("aria-label", "Product")
                    .ApplyValueMode(EditorApplyValueMode.UseButtons)
                )
            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Hide selected items</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                    .Items(Model.Items)
                    .InputAttr("aria-label", "Product")
                    .HideSelectedItems(true)
                )
            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Single line mode</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                    .Items(Model.Items)
                    .InputAttr("aria-label", "Product")
                    .Multiline(false)
                )
            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Add custom items</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                    .Items(Model.Items)
                    .AcceptCustomValue(true)
                    .InputAttr("aria-label", "Product")
                    .OnCustomItemCreating("customItem_creating")
                )
            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">With custom placeholder</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                    .Items(Model.Items)
                    .InputAttr("aria-label", "Product")
                    .Placeholder("Choose Product...")
                )
            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Disabled</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                    .Items(Model.Items)
                    .Value(new[] { Model.Items.First() })
                    .InputAttr("aria-label", "Product")
                    .Disabled(true)
                )
            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Data source</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                    .DataSource(d => d.Mvc().LoadAction("GetProducts").Key("ID"))
                    .DisplayExpr("Name")
                    .InputAttr("aria-label", "Product")
                    .ValueExpr("ID")
                )
            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Custom template</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                    .DataSource(d => d.Mvc().LoadAction("GetProducts").Key("ID"))
                    .Value(new[] {1, 2})
                    .DisplayExpr("Name")
                    .InputAttr("aria-label", "Product")
                    .ValueExpr("ID")
                    .ItemTemplate(@<text>
                        <div class="custom-item">
                            <img src="<%- ImageSrc %>" />
                            <div class="product-name"><%- Name %></div>
                        </div>
                    </text>)
                    .TagTemplate(new JS("tagTemplate"))
                )

                @(Html.DevExtreme().Popover()
                    .ID("popover")
                )
            </div>
        </div>
    </div>
</div>

<script>
    function customItem_creating(args) {
        var newValue = args.text,
            component = args.component,
            currentItems = component.option("items");
        const isItemInDataSource = currentItems.some((item) => item === newValue);
        if (!isItemInDataSource) {
            currentItems.unshift(newValue);
            component.option('items', currentItems);
        }
        args.customItem = newValue;
    }

    function tagTemplate(data) {
        const isDisabled = data.Name === 'SuperHD Player';
        const popover = $('#popover').dxPopover('instance')
        const tagImg = $('<img>', { class: 'tag-img' }).attr({
            src: data.ImageSrc,
            alt: data.Name
        })
        const tag = $('<div>')
            .attr('aria-disabled', isDisabled)
            .addClass(`dx-tag-content ${isDisabled && 'disabled-tag'}`)
            .append(
                tagImg,
                $('<span>').text(data.Name),
                !isDisabled && $('<div>').addClass('dx-tag-remove-button')
            )
        tag.on('dxhoverstart', function (args) {
            popover.option({
                contentTemplate: () => popoverContentTemplate(data),
                target: args.target.closest('.dx-tag')
            });
            popover.show();
        })
        tag.on('dxhoverend', function (args) {
            popover.hide();
        })
        return tag;
    }
    
    const popoverContentTemplate = function (product) {
        return $('<div>').append(
            $(`<p><b>Name: </b><span>${product.Name}</span></p>`),
            $(`<p><b>Price: </b><span>$${product.Price}</span></p>`),
            $(`<p><b>In-stock: </b><span>${product.CurrentInventory}</span></p>`),
            $(`<p><b>Category: </b><span>${product.Category}</span></p>`),
        );
    };
</script>
