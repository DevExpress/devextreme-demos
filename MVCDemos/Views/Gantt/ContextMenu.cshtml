@using DevExtreme.MVC.Demos.Models.SampleData
@using DevExtreme.MVC.Demos.Models.Gantt

<div class="options">
    <div class="caption">Options</div>
    <div class="option">
        @(Html.DevExtreme().CheckBox()
            .Value(false)
            .Text("Prevent Context Menu Showing")
            .OnValueChanged("preventContextMenuShowing_changed")
        )
    </div>
    <div class="option">
        @(Html.DevExtreme().CheckBox()
            .Value(true)
            .Text("Customize Task Tooltip")
            .OnValueChanged("customizeContextMenu_changed")
        )
    </div>
</div>

@(Html.DevExtreme().Gantt<Task>()
    .ID("gantt")
    .TaskTitlePosition(GanttTaskTitlePosition.Outside)
    .ScaleType(GanttScaleType.Quarters)
    .Tasks(t => t
        .DataSource(ds => ds.Array().Data(SampleData.GanttTasks).Key("ID"))
        .KeyExpr("ID")
        .TitleExpr("Title")
        .ParentIdExpr("ParentId")
        .StartExpr("Start")
        .EndExpr("End")
        .ProgressExpr("Progress")
    )
    .Dependencies(d => d
        .DataSource(ds => ds.Array().Data(SampleData.GanttDependencies).Key("ID"))
        .KeyExpr("ID")
        .PredecessorIdExpr("PredecessorId")
        .SuccessorIdExpr("SuccessorId")
        .TypeExpr("Type")
    )
    .Resources(r => r
        .DataSource(ds => ds.Array().Data(SampleData.GanttResources).Key("ID"))
        .KeyExpr("ID")
        .TextExpr("Text")
    )
    .ResourceAssignments(ra => ra
        .DataSource(ds => ds.Array().Data(SampleData.GanttResourceAssignments).Key("ID"))
        .KeyExpr("ID")
        .TaskIdExpr("TaskId")
        .ResourceIdExpr("ResourceId")
    )
    .Editing(e => e.Enabled(true))
    .Columns(columns => {
        columns.AddFor(m => m.Title)
            .Caption("Subject")
            .Width(300);
        columns.AddFor(m => m.Start)
            .Caption("Start Date");
        columns.AddFor(m => m.End)
            .Caption("End Date");
    })
    .TaskListWidth(500)
    .ScaleType(GanttScaleType.Weeks)
    .OnCustomCommand("onCustomCommandClick")
    .ContextMenu(cm => {
        cm.Items(i => {
        i.Add().Name(GanttContextMenuItem.AddTask);
        i.Add().Name(GanttContextMenuItem.TaskDetails);
        i.Add().Name(GanttContextMenuItem.DeleteTask);
        i.Add().Name("ToggleDisplayOfResources").Text("Toggle Display of Resources");
        });
    })

)

<script>
    function getGanttInstance() {
        return $("#gantt").dxGantt("instance");
    }

    function preventContextMenuShowing_changed(e) {
        var ganttInstance = getGanttInstance();
        ganttInstance.option("contextMenu.enabled", !e.value);
    }

    function customizeContextMenu_changed(e) {
        var ganttInstance = getGanttInstance();
        var items = e.value ? getContextMenuItems() : undefined;
        ganttInstance.option("contextMenu.items", items);
    }

    function onCustomCommandClick(e) {
        var ganttInstance = getGanttInstance();
        if (e.name == 'ToggleDisplayOfResources') {
            var showResources = ganttInstance.option("showResources");
            ganttInstance.option("showResources", !showResources);
        }
    }

    function getContextMenuItems() {
        return [
            "addTask",
            "taskdetails",
            "deleteTask",
            {
                name: "ToggleDisplayOfResources",
                text: "Toggle Display of Resources"
            }
        ]
    }
</script>
