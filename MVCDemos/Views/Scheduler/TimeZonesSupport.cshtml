@model IEnumerable<DevExtreme.MVC.Demos.Models.Event>

<div class="option">
    <span>Office Time Zone</span>
    @(Html.DevExtreme().SelectBox()
        .Width(240)
        .ElementAttr("class", "selectBox")
        .DisplayExpr("title")
        .ValueExpr("id")
        .OnValueChanged("onSelectBoxValueChanged")
    )
</div>

@(Html.DevExtreme().Scheduler()
    .DataSource(Model)
    .StartDateExpr("StartDate")
    .EndDateExpr("EndDate")
    .TextExpr("Text")
    .RecurrenceRuleExpr("RecurrenceRule")
    .Views(new[] { SchedulerViewType.WorkWeek })
    .CurrentView(SchedulerViewType.WorkWeek)
    .CurrentDate(new DateTime(2021, 4, 27))
    .StartDayHour(8)
    .Height(600)
    .Editing(e => e.AllowTimeZoneEditing(true))
    .ElementAttr("class", "scheduler")
    .OnOptionChanged("onSchedulerOptionChanged")
    .OnAppointmentFormOpening("onAppointmentFormOpening")
)

<script>
    const getLocations = function(date) {
        const timeZones = DevExpress.utils.getTimeZones(date);
        return timeZones.filter(function(timeZone) {
            return locations.indexOf(timeZone.id) !== -1;
        });
    };

    const locations = ["Europe/London", "Europe/Berlin", "Europe/Helsinki"];
    const currentDate = new Date(2021, 4, 25);
    const demoLocations = getLocations(currentDate);

    function onSelectBoxValueChanged(e) {
        getScheduler().option("timeZone", e.value);
    }

    function onSchedulerOptionChanged(e) {
        if (e.name === "currentDate") {
            getSelectBox().option("items", getLocations(e.value));
        }
    }

    function onAppointmentFormOpening(e) {
        const form = e.form;

        const startDateTimezoneEditor = form.getEditor("startDateTimeZone");
        const endDateTimezoneEditor = form.getEditor("endDateTimeZone");
        const startDatedataSource = startDateTimezoneEditor.option("dataSource");
        const endDateDataSource = endDateTimezoneEditor.option("dataSource");

        startDatedataSource.filter(["id", "contains", "Europe"]);
        endDateDataSource.filter(["id", "contains", "Europe"]);

        startDatedataSource.load();
        endDateDataSource.load();
    }

    function getSelectBox() {
        return $(".selectBox").dxSelectBox("instance");
    }

    function getScheduler() {
        return $(".scheduler").dxScheduler("instance");
    }

    $(function () {
        const selectBox = getSelectBox();
        selectBox.option("items", demoLocations);
        selectBox.option("value", demoLocations[0].id);

        const scheduler = getScheduler();
        scheduler.option("timeZone", demoLocations[0].id);
    })
</script>
