@(Html.DevExtreme().Diagram()
    .ID("diagram")
    .OnRequestOperation("onRequestOperation")
    .OnRequestLayoutUpdate("onRequestLayoutUpdate")
    .CustomShapes(cs => {
        cs.Add().Category("items").Type("root").BaseType("octagon").DefaultText("Development");
        cs.Add().Category("items").Type("team").BaseType("ellipse").Title("Team").DefaultText("Team Name");
        cs.Add().Category("items").Type("employee").BaseType("rectangle").Title("Employee").DefaultText("Employee Name");
    })
    .Nodes(ns => ns
        .DataSource(d => d
            .Array()
            .Key("ID")
            .Data(Model)
        )
        .KeyExpr("ID")
        .TextExpr("Name")
        .TypeExpr("Type")
        .ParentKeyExpr("ParentID")
        .AutoLayout(al => al
            .Type(DiagramDataLayoutType.Tree)
        )
    )
    .ContextToolbox(t => t
        .ShapeIconsPerRow(2)
        .Width(100)
        .Shapes(new[] { "team", "employee" })
    )
    .Toolbox(t => t
        .ShapeIconsPerRow(2)
        .Groups(g => g
            .Add().Title("Items").Shapes(new[] { "team", "employee" })
        )
    )
    .PropertiesPanel(pp => pp
        .Visibility(DiagramPanelVisibility.Disabled)
    )
)

<script type="text/javascript">
    function onRequestLayoutUpdate(e) {
        for(var i = 0; i < e.changes.length; i++) {
            if(e.changes[i].Type === 'remove')
                e.allowed = true;
            else if(e.changes[i].data.ParentID !== undefined && e.changes[i].data.ParentID !== null)
                e.allowed = true;
        }
    }

    function onRequestOperation(e) {
        if(e.operation === "addShape") {
            if(e.args.shape.Type !== "employee" && e.args.shape.Type !== "team") {
                e.allowed = false;
            }
        }
        else if(e.operation === "deleteShape") {
            if(e.args.shape.dataItem && e.args.shape.dataItem.Type === "root") {
                e.allowed = false;
            }
            if(e.args.shape.dataItem && e.args.shape.dataItem.Type === "team") {
                var diagram = $("#diagram").dxDiagram("instance");
                var children = diagram.getNodeDataSource().items().filter(function(item) {
                    return item.ParentID === e.args.shape.dataItem.ID;
                });
                if(children.length > 0)
                    e.allowed = false;
            }
        }
        else if(e.operation === "deleteConnector") {
            e.allowed = false;
        }
        else if(e.operation === "changeConnection") {
            if(e.args.connectorPosition === "end" && e.args.shape === undefined)
                e.allowed = false;
            if(e.args.shape.dataItem && e.args.shape.dataItem.Type === "root" && e.args.connectorPosition === "end")
                e.allowed = false;
            if(e.args.shape.dataItem && e.args.shape.dataItem.Type === undefined) {
                if(e.args.connectorPosition === "start")
                    e.allowed = false;
                if(e.args.connectorPosition === "end" && e.args.shape.dataItem.ParentID !== undefined && e.args.shape.dataItem.ParentID !== null)
                    e.allowed = false;
            }
        }
        else if(e.operation === "changeConnectorPoints") {
            if(e.args.newPoints.length > 2)
                e.allowed = false;
        }
        else if(e.operation === "beforeChangeShapeText") {
            if(e.args.shape.dataItem && e.args.shape.dataItem.Type === "root")
                e.allowed = false;
        }
        else if(e.operation === "changeShapeText") {
            if(e.args.text === "")
                e.allowed = false;
        }
        else if(e.operation === "beforeChangeConnectorText") {
            e.allowed = false;
        }
    }
</script>
