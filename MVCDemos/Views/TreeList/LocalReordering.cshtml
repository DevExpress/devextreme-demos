<div id="treeListDemo">
    @(Html.DevExtreme().TreeList()
        .ID("treeList")
        .DataSource(new JS("employees"))
        .KeyExpr("ID")
        .ParentIdExpr("Head_ID")
        .ExpandedRowKeys(new JS("[1]"))
        .ShowRowLines(true)
        .ShowBorders(true)
        .ColumnAutoWidth(true)
        .RowDragging(rd => rd
            .AllowDropInsideItem(true)
            .AllowReordering(true)
            .OnDragChange("onDragChange")
            .OnReorder("onReorder")
            .ShowDragIcons(true)
        )
        .Columns(columns => {
            columns.Add().DataField("Title")
                .Caption("Position");

            columns.Add().DataField("Full_Name");

            columns.Add().DataField("City");

            columns.Add().DataField("State");

            columns.Add().DataField("Mobile_Phone");

            columns.Add().DataField("Hire_Date")
                .DataType(GridColumnDataType.Date);
        })
    )

    <div class="options">
        <div class="caption">Options</div>
        <div class="option">
            @(Html.DevExtreme().CheckBox()
                .ID("allowDropInside")
                .Text("Allow Drop Inside Item")
                .Value(true)
                .OnValueChanged(@<text>
                    function(e) {
                        getTreeList().option("rowDragging.allowDropInsideItem", e.value);
                    }
                </text>)
            )
        </div>
        <div class="option">
            @(Html.DevExtreme().CheckBox()
                .ID("allowReordering")
                .Text("Allow Reordering")
                .Value(true)
                .OnValueChanged(@<text>
                    function(e) {
                        getTreeList().option("rowDragging.allowReordering", e.value);
                    }
                </text>)
            )
        </div>
        <div class="option">
            @(Html.DevExtreme().CheckBox()
                .ID("showDragIcons")
                .Text("Show Drag Icons")
                .Value(true)
                .OnValueChanged(@<text>
                    function(e) {
                        getTreeList().option("rowDragging.showDragIcons", e.value);
                    }
                </text>)
            )
        </div>
    </div>
</div>

<script>
    function onDragChange(e) {
        var treeList = e.component,
            visibleRows = treeList.getVisibleRows(),
            sourceNode = treeList.getNodeByKey(e.itemData.ID),
            targetNode = visibleRows[e.toIndex].node;

        while(targetNode && targetNode.data) {
            if(targetNode.data.ID === sourceNode.data.ID) {
                e.cancel = true;
                break;
            }
            targetNode = targetNode.parent;
        }
    }

    function onReorder(e) {
        var visibleRows = e.component.getVisibleRows(),
            sourceData = e.itemData,
            toIndex = e.toIndex > e.fromIndex ? e.toIndex + 1 : e.toIndex,
            targetData = visibleRows[toIndex].node.data;

        if (e.dropInsideItem) {
            e.itemData.Head_ID = targetData.ID;
        } else {
            sourceData.Head_ID = targetData.Head_ID;

            var sourceIndex = employees.indexOf(sourceData);
            employees.splice(sourceIndex, 1);
            
            var targetIndex = employees.indexOf(targetData)
            employees.splice(targetIndex, 0, sourceData);
        }

        e.component.refresh();
    }

    function getTreeList() {
        return $("#treeList").dxTreeList("instance");
    }
</script>

<script src="~/Scripts/data/employees.js"></script>
