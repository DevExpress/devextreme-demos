@{
    var tabsPositions = new[] {
        "left",
        "top",
        "right",
        "bottom"
    };

    var stylingModes = new[] {
        "secondary",
        "primary"
    };

    var iconPositions = new[] {
        "top",
        "start",
        "end",
        "bottom"
    };
}

<div class="tabpanel-demo">
    <div class="widget-container">
        @(Html.DevExtreme().TabPanel()
            .ID("tabpanel")
            .ElementAttr("class", "dx-theme-background-color")
            .DataSource(d => d.Mvc().LoadAction("GetTabPanelItems"))
            .Width("100%")
            .Height(418)
            .AnimationEnabled(true)
            .SwipeEnabled(true)
            .SelectedIndex(0)
            .ShowNavButtons(true)
            .TabsPosition(Position.Top)
            .StylingMode(TabsStyle.Secondary)
            .IconPosition(TabsIconPosition.Top)
            .ItemTemplate(new JS("tabPanelTemplate"))
        )
    </div>

    <div class="options">
        <div class="caption">Options</div>

        <div class="option">
            <div class="option-label">Tabs position</div>

            @(Html.DevExtreme().SelectBox()
                .DataSource(tabsPositions)
                .Value("left")
                .InputAttr("aria-label", "Tabs positions")
                .OnValueChanged("tabsPositionChanged")
            )
        </div>

        <div class="option">
            <div class="option-label">Styling mode</div>

            @(Html.DevExtreme().SelectBox()
                .DataSource(stylingModes)
                .Value("secondary")
                .InputAttr("aria-label", "Styling mode")
                .OnValueChanged("stylingModeChanged")
            )
        </div>

        <div class="option">
            <div class="option-label">Icon position</div>

            @(Html.DevExtreme().SelectBox()
                .DataSource(iconPositions)
                .Value("top")
                .InputAttr("aria-label", "Icon positions")
                .OnValueChanged("iconPositionChanged")
            )
        </div>

        <div class="option">
            @(Html.DevExtreme().CheckBox()
                .Value(false)
                .Text("Show navigation buttons")
                .OnValueChanged("showNavButtonsChanged")
            )
        </div>
    </div>
</div>

<script>
    const taskItem = (task) => {
        const className = `task-item task-item-priority-${task.priority}`;

        return `
            <div class="${className}">
                <p class="task-item-text">
                    ${task.text}
                </p>

                <p class="task-item-info">
                    ${task.date} by ${task.assignedBy}
                </p>

                <i class="task-item-pseudo-button dx-icon dx-icon-overflow"></i>
            </div>
        `;
    };

    const taskList = (tasks) => {
        const list = tasks.reduce((accumulator, task) => `${accumulator} ${taskItem(task)}`, '');

        return `
            <div class="tabpanel-item">
                ${list}
            </div>
        `;
    };

    function tabPanelTemplate({ tasks }) {
        return taskList(tasks)
    }

    function getTabPanelInstance() {
        return $("#tabpanel-container").dxTabPanel("instance");
    }

    function tabsPositionChanged({ value }) {
        getTabPanelInstance().option({ tabsPosition: value });
    }

    function stylingModeChanged({ value }) {
        getTabPanelInstance().option({ stylingMode: value });
    }

    function iconPositionChanged({ value }) {
        getTabPanelInstance().option({ iconPosition: value });
    }

    function showNavButtonsChanged({ value }) {
        getTabPanelInstance().option({ showNavButtons: value });
    }
</script>
