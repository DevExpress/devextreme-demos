@(Html.DevExtreme().PieChart()
    .ID("pie")
    .CustomizePoint("customizePoint")
    .Series(s => {
        s.Add()
        .ValueField("Value")
        .ArgumentField("Type")
        .Label(l => l
            .Visible(true)
            .Connector(c => c
                .Visible(true)
            )
            .CustomizeText("customizeText")
        )
    })
    .Export(e => e.Enabled(true))
    .DataSource(new[] {
        new { Type = "Stroke Pattern", Value = 1 },
        new { Type = "Square Pattern", Value = 1 },
        new { Type = "Linear Gradient", Value = 1 },
        new { Type = "Radial Gradient", Value = 1 },
        new { Type = "Pattern with image", Value = 1 }
    })
)

<script>
    var registerGradient = DevExpress.common.charts.registerGradient,
        registerPattern = DevExpress.common.charts.registerPattern;

    var imagePatternSize = 12,
        shapePatternSize = 6;

    function customizeText(info) {
		return info.argument;
	}

    function customizePoint(point) {
        var color = point.series.getPointsByArg(point.argument)[0].getColor(),
            pointSettings = { color };
        if (point.argument === 'Stroke Pattern') {
            pointSettings.color = { fillId: strokePattern(color) };
        }
        if (point.argument === 'Square Pattern') {
            pointSettings.color = { fillId: squarePattern(color) };
        }
        if (point.argument === 'Linear Gradient') {
            pointSettings.color = { fillId: linearGradient(color) };
        }
        if (point.argument === 'Radial Gradient') {
            pointSettings.color = { fillId: radialGradient(color) };
        }
        if (point.argument === 'Pattern with image') {
            pointSettings.color = { fillId: patternImage(color) };
        }

        return pointSettings;
    }

    function hexToRgb(hex, opacity = 1) {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return `rgba(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}, ${opacity})`;
    }

    function gradient(type, color1, color2) {
        return registerGradient(type, {
            colors: [{
                offset: '20%',
                color: color1,
            }, {
                offset: '90%',
                color: color2,
            }],
        });
    }

    function linearGradient(color) { return gradient('linear', color, hexToRgb(color, 0.5)); }

    function radialGradient(color) { return gradient('radial', hexToRgb(color, 0.5), color); }

    function patternImage(color) {
        return registerPattern({
            width: imagePatternSize,
            height: imagePatternSize,
            template: (container) => {
                container.innerHTML = ['<svg>',
                    `<rect x=0 y=0 width=${imagePatternSize} height=${imagePatternSize} fill=${color} />`,
                    `<image x=0 y=0 width=${imagePatternSize} height=${imagePatternSize}
                        href='../../../../images/Charts/PieWithCustomStyles/diamond.png'
                        opacity=0.6
                    />`,
                    '</svg>'].join('');
            },
        });
    }

    function strokePattern(color) {
        return registerPattern({
            width: shapePatternSize,
            height: shapePatternSize,
            template: (container) => {
                const halfSize = shapePatternSize / 2;
                const oneHalfSize = shapePatternSize * 1.5;
                const d = `M ${halfSize} ${-halfSize} L ${-halfSize} ${halfSize} M 0 ${shapePatternSize} L ${shapePatternSize} 0 M ${oneHalfSize} ${halfSize} L ${halfSize} ${oneHalfSize}`;

                container.innerHTML = ['<svg>',
                    `<path stroke=${color} stroke-width=2 d="${d}" />`,
                    '</svg>'].join('');
            },
        });
    }

    function squarePattern(color) {
        return registerPattern({
            width: shapePatternSize,
            height: shapePatternSize,
            template: (container) => {
                container.innerHTML = ['<svg>',
                    `<rect x=0 y=0 width=${shapePatternSize} height=${shapePatternSize} stroke=${color} stroke-width=2 />`,
                    '</svg>'].join('');
            },
        });
    }
</script>