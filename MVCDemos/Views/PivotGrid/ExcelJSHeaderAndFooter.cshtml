@section ExternalDependencies {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.10.1/polyfill.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
}

<div class="long-title"><h3>Sales Amount by Region</h3></div>

@(Html.DevExtreme().PivotGrid()
    .ID("sales")
    .Height(440)
    .ShowBorders(true)
    .AllowSorting(true)
    .AllowFiltering(true)
    .Height(440)
    .ShowBorders(true)
    .FieldPanel(p => p.ShowColumnFields(true)
        .ShowDataFields(true)
        .ShowFilterFields(true)
        .ShowRowFields(true)
        .AllowFieldDragging(true)
        .Visible(true))
    .FieldChooser(c => c.Enabled(false))
    .Export(e => e.Enabled(true))
    .OnExporting("onExporting")
    .DataSource(d => d
        .Store(s => s.WebApi().Controller("PivotGridData"))
        .Fields(fields => {
            fields.Add()
                .Caption("Region")
                .Width(120)
                .DataField("Region")
                .Area(PivotGridArea.Row)
                .Expanded(true);

            fields.Add()
                .Caption("City")
                .Width(150)
                .DataField("City")
                .Area(PivotGridArea.Row);

            fields.Add()
                .DataField("Date")
                .DataType(PivotGridDataType.Date)
                .Area(PivotGridArea.Column)
                .FilterValues(new[] { new[] { 2013 }, new[] { 2014 }, new[] { 2015 } })
                .Expanded(false);

            fields.Add()
                .Caption("Sales")
                .DataField("Amount")
                .DataType(PivotGridDataType.Number)
                .SummaryType(SummaryType.Sum)
                .Format(Format.Currency)
                .Area(PivotGridArea.Data);

            fields.Add()
                .Caption("Country")
                .DataField("country")
                .Area(PivotGridArea.Filter);
        })
    )
)

<div class="export-options">
    <div class="caption">Export Options</div>
    <div class="options">
        @(Html.DevExtreme().CheckBox()
            .Text("Export Data Field Headers")
            .Value(false)
            .OnValueChanged("onExportDataFieldHeadersChanged")
        )
        @(Html.DevExtreme().CheckBox()
            .Text("Export Row Field Headers")
            .Value(false)
            .OnValueChanged("onExportRowFieldHeadersChanged")
        )
        @(Html.DevExtreme().CheckBox()
            .Text("Export Column Field Headers")
            .Value(false)
            .OnValueChanged("onExportColumnFieldHeadersChanged")
        )
        @(Html.DevExtreme().CheckBox()
            .Text("Export Filter Field Headers")
            .Value(false)
            .OnValueChanged("onExportFilterFieldHeadersChanged")
        )
    </div>
</div>

<script>
    var exportHeaderOptions = {
        exportRowFieldHeaders: false,
        exportColumnFieldHeaders: false,
        exportDataFieldHeaders: false,
        exportFilterFieldHeaders: false,
    };

    function onExporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Sales');

        worksheet.columns = [
            { width: 30 }, { width: 20 }, { width: 30 }, { width: 30 }, { width: 30 }, { width: 30 }
        ];

        DevExpress.excelExporter.exportPivotGrid({
            component: e.component,
            worksheet: worksheet,
            topLeftCell: { row: 4, column: 1 },
            keepColumnWidths: false,
            ...exportHeaderOptions
        }).then(function (cellRange) {
            // Header
            var headerRow = worksheet.getRow(2);
            headerRow.height = 30;

            var columnFromIndex = worksheet.views[0].xSplit + 1;
            var columnToIndex = columnFromIndex + 3;
            worksheet.mergeCells(2, columnFromIndex, 2, columnToIndex);

            var headerCell = headerRow.getCell(columnFromIndex);
            headerCell.value = 'Sales Amount by Region';
            headerCell.font = { name: 'Segoe UI Light', size: 22, bold: true };
            headerCell.alignment = { horizontal: 'left', vertical: 'middle', wrapText: true };

            // Footer
            var footerRowIndex = cellRange.to.row + 2;
            var footerCell = worksheet.getRow(footerRowIndex).getCell(cellRange.to.column);
            footerCell.value = 'www.wikipedia.org';
            footerCell.font = { color: { argb: 'BFBFBF' }, italic: true };
            footerCell.alignment = { horizontal: 'right' };
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Sales.xlsx');
            });
        });
        e.cancel = true;
    }

    function onExportDataFieldHeadersChanged(e) {
        exportHeaderOptions.exportDataFieldHeaders = e.value;
    }

    function onExportRowFieldHeadersChanged(e) {
        exportHeaderOptions.exportRowFieldHeaders = e.value;
    }

    function onExportColumnFieldHeadersChanged(e) {
        exportHeaderOptions.exportColumnFieldHeaders = e.value;
    }

    function onExportFilterFieldHeadersChanged(e) {
        exportHeaderOptions.exportFilterFieldHeaders = e.value;
    }
</script>

